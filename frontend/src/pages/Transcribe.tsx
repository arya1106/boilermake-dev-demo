import Head from "next/head";
import React, { FormEvent, Ref, useRef, useState } from "react";
import ResponsiveAppBar from "../components/ResponsiveAppBar";
import FormInput from "../components/FormInput";
import {
  Box,
  Button,
  Container,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  Grid,
  Paper,
  Snackbar,
  Stack,
  TextField,
  Toolbar,
  Typography,
  styled,
} from "@mui/material";
import { MapContainer, ZoomControl } from "react-leaflet";
import axios from "axios";
import dynamic from "next/dynamic";
import { LatLng, Marker } from "leaflet";
import { format, parseISO } from "date-fns";

export default function Transcribe() {
  const MapWithNoSSR = dynamic(() => import("../components/LeafletMap"), {
    ssr: false,
  });

  const formInputStateRef = useRef<any>();

  const [showToast, setShowToast] = useState(false);
  const [databseFileStatus, setDatabaseFileStatus] = useState("");
  const [transcript, setTranscript] = useState("");
  const [databaseLocation, setDatabaseLocation] = useState([40.4257, -86.9269]);
  const [databaseTimestamp, setDatabaseTimestamp] = useState("");
  const [databaseRecorder, setDatabaseRecorder] = useState("");
  const [databaseTitle, setDatabaseTitle] = useState("");
  const [databaseFilename, setDatabaseFilename] = useState("");

  const handleClose = () => {
    setShowToast(false);
  }

  function lon2tile(lon: number, zoom: number) { return (Math.floor((lon+180)/360*Math.pow(2,zoom))); }
  function lat2tile(lat: number,zoom: number)  { return (Math.floor((1-Math.log(Math.tan(lat*Math.PI/180) + 1/Math.cos(lat*Math.PI/180))/Math.PI)/2 *Math.pow(2,zoom))); }

  return (
    <>
      <Head>
        <title>TranscribeMe</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ResponsiveAppBar />
      <Grid
        container
        component="main"
        sx={{ p: 3 }}
        style={{ minHeight: "100vh" }}
        spacing={0}
        direction="column"
      >
        <Toolbar />
        <Grid
          container
          gap={2}
          spacing={2}
          flexGrow={1}
          alignItems="center"
          justifyContent="center"
          direction="row"
        >
          <Stack spacing={2}>
            <FormInput ref={formInputStateRef}/>
            <MapWithNoSSR center={[40.4276, -86.9169]} locationTextFieldId="location" coordsTextFieldId="coords"/>
            <TextField
              id="location"
              variant="outlined"
              label="Location"
              defaultValue={" "}
              InputProps={{ readOnly: true }}
            ></TextField>
            <input
              id="coords"
              type="text"
              hidden />
          </Stack>
          <Grid item>
            <Button onClick={async ()=>{
              let formData = new FormData();
              const formInputData = formInputStateRef.current.getFormInput();
              formData.append("audioFile", formInputData.file);
              formData.append("title", formInputData.title);
              formData.append("recorder", formInputData.recorder);
              const coords = (document.getElementById("coords") as HTMLInputElement).value.split(",").map((value, index, array)=>{
                return parseFloat(value).toPrecision(6);
              });
              formData.append("lat", coords[0]);
              formData.append("lng", coords[1]);
              const response = await axios({
                method: 'post',
                url: 'http://127.0.0.1:8000/createTranscription',
                data: formData,
                headers: {'Content-Type': 'multipart/form-data' }
                })
              const resData = response.data
              if(resData['fileExistsInDB']){
                setDatabaseFileStatus("The file you uploaded already exists in the databse. The information is below: ")
              } else {
                setDatabaseFileStatus("File successfully transcribed! The information is below:")
              }
              setTranscript(resData['text']);
              setDatabaseLocation([resData['lat'], resData['long']])
              setDatabaseTimestamp(format(parseISO(resData["createdOn"]), "PPpp"));
              setShowToast(true);
              setDatabaseRecorder(resData['recorder'])
              setDatabaseTitle(resData['title'])
              setDatabaseFilename(resData['filename'])
            }} variant="contained">Submit</Button>
            <Dialog open={showToast} onClose={handleClose} fullWidth maxWidth="sm">
              <DialogTitle>File Status</DialogTitle>
              <DialogContent>
              <DialogContentText>{databseFileStatus}</DialogContentText>
              <br/>
              <DialogContentText fontWeight="700">Title:</DialogContentText>
              <DialogContentText >{databaseTitle}</DialogContentText>
              <br/>
              <DialogContentText fontWeight="700">Recorder:</DialogContentText>
              <DialogContentText >{databaseRecorder}</DialogContentText>
              <br/>
              <DialogContentText >{databaseFilename}</DialogContentText>
              <br/>
              <DialogContentText fontWeight="700">Transcript:</DialogContentText>
              <DialogContentText >{transcript}</DialogContentText>
              <br/>
              <DialogContentText fontWeight="700">Location:</DialogContentText>
              {
                // eslint-disable-next-line @next/next/no-img-element
                <img src={`https://tile.openstreetmap.org/17/${lon2tile(databaseLocation[1], 17)}/${lat2tile(databaseLocation[0], 17)}.png`} alt="map"/>
              }
              <br/>
              <br/>
              <DialogContentText fontWeight="700">Created On:</DialogContentText>
              <DialogContentText >{databaseTimestamp}</DialogContentText>
              </DialogContent>
              <DialogActions>
                <Button onClick={handleClose}>OK</Button>
              </DialogActions>
            </Dialog>
          </Grid>
        </Grid>
      </Grid>
    </>
  );
}
